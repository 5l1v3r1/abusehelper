import os
import sys
import subprocess

class VersionError(Exception):
    pass

try:
    import _version
    VERSION = _version.VERSION
except ImportError:
    VERSION = None

def version():
    return VERSION

def version_str():
    ver = version()
    if ver is None:
        return "<unknown>"
    return ver[1]

def _call_hg(base_path, *args):
    popen = subprocess.Popen(["hg"] + list(args) + [base_path],
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)

    stdout, stderr = popen.communicate()
    if popen.returncode:
        raise VersionError(stderr.strip())

    return stdout.strip()

def generate(base_path):
    global_id = _call_hg(base_path, "identify", "-i")
    local_id = _call_hg(base_path, "identify", "-n")

    is_clean = not local_id.endswith("+")
    if not is_clean:
        local_id = local_id[:-1]
    ver = (is_clean, local_id+":"+global_id)

    version_dir, _ = os.path.split(__file__)
    module_file = open(os.path.join(version_dir, "_version.py"), "w")
    print >> module_file, "# This is an autogenerated file. Do not touch."
    print >> module_file, "VERSION =", repr(ver)
    module_file.close()

    global VERSION
    VERSION = ver
