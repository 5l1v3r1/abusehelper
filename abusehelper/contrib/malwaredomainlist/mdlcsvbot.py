import time
import socket

import idiokit
from abusehelper.core import utils, bot, events

def parse_dates(values,
                in_format="%Y/%m/%d_%H:%M",
                out_format="%Y-%m-%d %H:%M:%SZ"):
    for value in values:
        try:
            struct = time.strptime(value, in_format)
        except ValueError:
            return
        yield "timestamp", time.strftime(out_format, struct)

def is_ip(string):
    for addr_type in (socket.AF_INET, socket.AF_INET6):
        try:
            socket.inet_pton(addr_type, string)
        except (ValueError, socket.error):
            pass
        else:
            return True
    return False

def normalized_url(url):
    # We're told that in this case HTTP is a rather safe bet, as
    # there have been very few occurrences HTTPS sites in MDL.
    return "http://" + url

def parse_ips(ips):
    for ip in ips:
        bites = ip.split("/")

        if is_ip(bites[0]):
            yield "ip", bites[0]

        if len(bites) > 1:
            yield "url", normalized_url(ip)

def parse_urls(urls):
    for url in urls:
        yield "url", normalized_url(url)

class MDLBot(bot.PollingBot):
    def _filter(self, event, source_url, badset=frozenset("-")):
        if event.contains("inactive", "1"):
            return
        event.clear("inactive")

        for key, value in tuple(event.items()):
            value = value.strip()
            if not value or set(value) == badset:
                event.clear(key)

        new = events.Event()

        for key, value in parse_ips(event.values("ip")):
            new.add(key, value)
        event.clear("ip")

        for key, value in parse_urls(event.values("url")):
            new.add(key, value)
        event.clear("url")

        for key, value in parse_dates(event.values("date")):
            new.add(key, value)
        event.clear("date")

        for key, value in event.items():
            new.add(key, value)

        new.add("feed", "mdlcsv")
        new.add("description url", source_url)
        return (new,)

    @idiokit.stream
    def poll(self, url="http://www.malwaredomainlist.com/mdlcsv.php"):
        self.log.info("Downloading MDL database")
        try:
            info, fileobj = yield utils.fetch_url(url)
        except utils.FetchUrlFailed, fuf:
            self.log.error("MDL database downloading failed: %r", fuf)
            return
        self.log.info("MDL database downloaded")

        columns = ["date", "url", "ip", "reverse", "description",
                   "registrant", "asn", "inactive", "cc"]
        yield (utils.csv_to_events(fileobj, columns=columns)
               | idiokit.map(self._filter, url))

if __name__ == "__main__":
    MDLBot.from_command_line().execute()
