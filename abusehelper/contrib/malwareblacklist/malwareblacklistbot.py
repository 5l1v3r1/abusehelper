"""
Malwareblacklist feed handler. 

Maintainer: Sauli Pahlman <sauli@clarifiednetworks.com>
"""

import re
import cgi
import time
import socket
import urlparse

from abusehelper.core import events
from abusehelper.contrib.rssbot.rssbot import RSSBot

def is_ip(string):
    for addr_type in (socket.AF_INET, socket.AF_INET6):
        try:
            socket.inet_pton(addr_type, string)
        except (ValueError, socket.error):
            pass
        else:
            return True
    return False

def parse_title(title):
    """
    ZeuS Tracker and SpyEye Tracker styles:

    >>> list(parse_title("tempestinc.org/test/admin/refleksi-dalam-pengajaran-dan-pembelajaran/hogan-crash-supra.html (May 10 2012 09:06:52:607AM"))
    [('time', '2012-05-10 09:06:52 UTC')]

    Ignore if can't be parsed:

    >>> list(parse_title("1.2.3.4/badness.php"))
    []
    """

    match = re.search(r"(\w{3} \d\d \d\d\d\d \d\d\:\d\d:\d\d:\d\d\d\w\w)", title)
    if not match:
        return

    timestamp = match.group(1)
    for format in ("%B %d %Y %I:%M:%S:%f%p"):
        try:
            timestamp = time.strptime(timestamp, format)
        except ValueError:
            continue
        yield "time", time.strftime("%Y-%m-%d %H:%M:%S UTC", timestamp)
        break

def parse_link(link):
    """
    >>> sorted(parse_link("https://spyeyetracker.abuse.ch/monitor.php?host=www.example.com"))
    [('host', 'www.example.com'), ('more info', 'https://spyeyetracker.abuse.ch/monitor.php?host=www.example.com')]

    >>> sorted(parse_link("https://spyeyetracker.abuse.ch/monitor.php?host=1.2.3.4"))
    [('host', '1.2.3.4'), ('ip', '1.2.3.4'), ('more info', 'https://spyeyetracker.abuse.ch/monitor.php?host=1.2.3.4')]
    """

    yield "more info", link

def parse_description(description):
    for part in description.split(","):
        pair = part.split(":", 1)
        if len(pair) < 2:
            continue
        key, value = pair

        value = value.strip()
        if not value:
            continue

        key = key.strip().lower()
        if key == "Host":
            yield "host", value
        elif key == "IP address":
            yield "ip", value
        else:
            yield key, value

class MalwareblacklistBot(RSSBot):
    feeds = "http://www.malwareblacklist.com/mbl.xml"

    def parse_title(self, string):
        return parse_title(string)

    def parse_link(self, string):
        return parse_link(string)

    def parse_description(self, string):
        return parse_description(string)

    def create_event(self, source=None, **keys):
        event = events.Event()

        for name, string in keys.iteritems():
            parse = getattr(self, "parse_" + name, None)
            if parse is None:
                continue

            for key, value in parse(string):
                event.add(key, value)

        if not event.contains():
            return None

        # Normalize the malware name(s) to lowercase
        event.add("type", "malware")
        event.add("feed", "malwareblacklist.com")
        event.add("source url", source)

        return event

if __name__ == "__main__":
    MalwareblacklistBot.from_command_line().run()
